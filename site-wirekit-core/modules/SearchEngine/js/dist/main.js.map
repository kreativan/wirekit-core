{"version":3,"sources":["src/Core.js","src/Tabs.js","main.js"],"names":["PWSE_Core","document","addEventListener","window","pwse","dispatchEvent","CustomEvent","PWSE_Tabs","init","tabsParent","rememberActiveTab","tabContainers","querySelectorAll","length","forEach","tabContainer","tablist","querySelector","tabs","panels","currentTabNum","currentTabID","tabStash","localStorage","getItem","JSON","parse","hasOwnProperty","getAttribute","switchTab","oldTab","newTab","focus","removeAttribute","setAttribute","index","Array","prototype","indexOf","call","oldIndex","hidden","closest","setItem","stringify","tab","i","match","parentNode","e","preventDefault","currentTab","currentTarget","dir","which","panel","id"],"mappings":"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","file":"main.js","sourceRoot":"..","sourcesContent":["/**\n * SearchEngine JS Core\n *\n * @version 0.1.1\n */\nclass PWSE_Core {\n\n    /**\n     * Constructor\n     */\n    constructor() {}\n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    window.pwse = new PWSE_Core();\n    document.dispatchEvent(new CustomEvent('pwse_init'));\n});\n","/**\n * SearchEngine JS Tabs\n *\n * Based on https://inclusive-components.design/tabbed-interfaces/.\n *\n * @version 0.2.0\n */\nclass PWSE_Tabs {\n\n    /**\n     * Constructor method\n     */\n    constructor() {\n        this.init();\n    }\n\n    /**\n     * Init method\n     *\n     * @param {?Object} tabsParent Optional parent node for tabs.\n     * @param {Boolean} rememberActiveTab Remember active tab?\n     */\n    init(tabsParent = null, rememberActiveTab = true) {\n\n        // find tab containers\n        let tabContainers = [];\n        tabsParent = typeof tabsParent === 'Object' ? tabsParent : document;\n        tabContainers = tabsParent.querySelectorAll('.pwse-tabs');\n        if (!tabContainers.length) return;\n\n        tabContainers.forEach(tabContainer => {\n\n            // get relevant elements and collections\n            const tablist = tabContainer.querySelector('[role=\"tablist\"]');\n            const tabs = tablist.querySelectorAll('[role=\"tab\"]');\n            const panels = tabContainer.querySelectorAll(':scope > [role=\"tabpanel\"]');\n\n            // get tab stash from localStorage\n            let currentTabNum = 0;\n            let currentTabID = null;\n            if (rememberActiveTab) {\n                let tabStash = localStorage.getItem('pwse-tabs');\n                tabStash = tabStash ? JSON.parse(tabStash) : {};\n                if (tabStash.hasOwnProperty(tabContainer.getAttribute('id'))) {\n                    currentTabID = tabStash[tabContainer.getAttribute('id')];\n                }\n            }\n\n            // the tab switching function\n            const switchTab = (oldTab, newTab) => {\n                newTab.focus();\n                // Make the active tab focusable by the user (Tab key)\n                newTab.removeAttribute('tabindex');\n                // Set the selected state\n                newTab.setAttribute('aria-selected', 'true');\n                oldTab.removeAttribute('aria-selected');\n                oldTab.setAttribute('tabindex', '-1');\n                // Get the indices of the new and old tabs to find the correct\n                // tab panels to show and hide\n                let index = Array.prototype.indexOf.call(tabs, newTab);\n                let oldIndex = Array.prototype.indexOf.call(tabs, oldTab);\n                panels[oldIndex].hidden = true;\n                panels[index].hidden = false;\n                if (rememberActiveTab) {\n                    let tabStash = localStorage.getItem('pwse-tabs');\n                    tabStash = tabStash ? JSON.parse(tabStash) : {};\n                    tabStash[newTab.closest('.pwse-tabs').getAttribute('id')] = newTab.getAttribute('id');\n                    localStorage.setItem('pwse-tabs', JSON.stringify(tabStash));\n                }\n            }\n\n            // add semantics are remove user focusability for each tab\n            Array.prototype.forEach.call(tabs, (tab, i) => {\n\n                // check if this tab is currently active\n                if (tab.getAttribute('aria-selected') === 'true') {\n                    currentTabID = tab.getAttribute('id');\n                    currentTabNum = i;\n                }\n\n                // bail out early if link target is not to a hash\n                if (tab.getAttribute('href').match('#') === null) {\n                    return;\n                }\n\n                // set attributes\n                tab.setAttribute('role', 'tab');\n                tab.setAttribute('id', tabContainer.getAttribute('id') + '-' + (i + 1));\n                tab.setAttribute('tabindex', '-1');\n                tab.parentNode.setAttribute('role', 'presentation');\n\n                // check if this tab should be activated\n                if (rememberActiveTab && currentTabID === tab.getAttribute('id')) {\n                    currentTabNum = i;\n                }\n\n                // handle clicking of tabs for mouse users\n                tab.addEventListener('click', e => {\n                    e.preventDefault();\n                    let currentTab = tablist.querySelector('[aria-selected]');\n                    if (e.currentTarget !== currentTab) {\n                        switchTab(currentTab, e.currentTarget);\n                    }\n                });\n\n                // handle keydown events for keyboard users\n                tab.addEventListener('keydown', e => {\n                    // get the index of the current tab in the tabs node list\n                    let index = Array.prototype.indexOf.call(tabs, e.currentTarget);\n                    // work out which key the user is pressing and\n                    // calculate the new tab's index where appropriate\n                    let dir = e.which === 37 ? index - 1 : e.which === 39 ? index + 1 : e.which === 40 ? 'down' : null;\n                    if (dir !== null) {\n                        e.preventDefault();\n                        // if the down key is pressed, move focus to the open panel,\n                        // otherwise switch to the adjacent tab\n                        dir === 'down' ? panels[i].focus() : tabs[dir] ? switchTab(e.currentTarget, tabs[dir]) : void 0;\n                    }\n                });\n            });\n\n            // activate current tab\n            tabs[currentTabNum].removeAttribute('tabindex');\n            tabs[currentTabNum].setAttribute('aria-selected', 'true');\n\n            // add the tablist role to the first <ul> in the tab container\n            tablist.setAttribute('role', 'tablist');\n\n            // add tab panel semantics and hide all tab panels by default\n            Array.prototype.forEach.call(panels, (panel, i) => {\n                panel.setAttribute('role', 'tabpanel');\n                panel.setAttribute('tabindex', '-1');\n                panel.setAttribute('aria-labelledby', tabs[i].id);\n                panel.hidden = true;\n            });\n\n            // reveal current tab panel\n            panels[currentTabNum].hidden = false;\n        })\n    }\n\n}\n\ndocument.addEventListener(\"pwse_init\", function() {\n    window.pwse.tabs = new PWSE_Tabs();\n});\n","import './src/Core.js'\nimport './src/Tabs.js'\n"]}